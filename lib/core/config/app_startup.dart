// filepath: lib/core/config/app_startup.dart
import 'package:flutter/material.dart';
import 'package:flutter_base_template/core/di/injection.dart';
import 'package:flutter_base_template/core/extensions/context_extensions.dart';
import 'package:flutter_base_template/core/services/network_service.dart';
import 'package:flutter_base_template/core/services/app_version_service.dart';
import 'package:flutter_base_template/core/storage/storage_service.dart';
import 'package:flutter_base_template/core/utils/logger.dart';
import 'package:flutter_base_template/features/auth/presentation/pages/login_page.dart';
import 'package:flutter_base_template/features/bottom_menu/presentation/pages/bottom_menu.dart';
import 'package:flutter_base_template/features/welcome/presentation/pages/welcom_page.dart';

/// AppLauncher: x·ª≠ l√Ω logic sau khi AppInitializer xong
class AppLauncher {
  static Future<void> launch(BuildContext context) async {
    try {
      // üîπ Ki·ªÉm tra m·∫°ng v·ªõi instance methods
      final hasInternet = await NetworkService().checkConnection(); 
      if (!hasInternet) {
        Logger.warning('Kh√¥ng c√≥ k·∫øt n·ªëi internet. ƒêang ch·ªù k·∫øt n·ªëi l·∫°i...');
        
        await NetworkService().monitorConnection(
          context,
          showMessage: true,
          onConnected: () async {
            Logger.info('ƒê√£ c√≥ k·∫øt n·ªëi internet. Ti·∫øp t·ª•c kh·ªüi t·∫°o ·ª©ng d·ª•ng...');
            await _continue(context);
          },
        );
      } else {
        await _continue(context);
      }
    } catch (e, s) {
      Logger.error('L·ªói khi kh·ªüi t·∫°o ·ª©ng d·ª•ng: $e', stackTrace: s);
      await _continue(context);
    }
  }

  static Future<void> _continue(BuildContext context) async {
    final storageService = getIt<StorageService>();
    final appVersionService = AppVersionService();

    // üîπ Ki·ªÉm tra c·∫≠p nh·∫≠t version
    await appVersionService.checkForUpdate(context, forceCheck: true);

    // üîπ Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng
    final firstRun = storageService.isFirstRun();
    final loggedIn = storageService.isLoggedIn();

    if (firstRun) await storageService.setFirstRun(false);

    // üîπ ƒêi·ªÅu h∆∞·ªõng
     if (firstRun) {
        context.pushReplacement(const WelcomPage());
      } else {
        if (loggedIn) {
          context.pushReplacement(const BottomMenu());
        } else {
          context.pushReplacement(const LoginPage());
        }
      }
  }
}
