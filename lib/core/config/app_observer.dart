// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// üìÅ lib/core/config/app_observer.dart (T·ªêI ∆ØU LOGGER)
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
import 'package:flutter/widgets.dart';
import 'package:flutter_base_template/core/config/environment_config.dart';
import 'package:flutter_base_template/core/utils/logger.dart';

class AppObserver with WidgetsBindingObserver {
  static final AppObserver _instance = AppObserver._internal();
  factory AppObserver() => _instance;
  AppObserver._internal();

  bool _isInitialized = false;
  final List<VoidCallback> _onResumeCallbacks = [];
  final List<VoidCallback> _onPauseCallbacks = [];

  void addOnResumeCallback(VoidCallback callback) {
    if (!_onResumeCallbacks.contains(callback)) {
      _onResumeCallbacks.add(callback);
    }
  }

  void addOnPauseCallback(VoidCallback callback) {
    if (!_onPauseCallbacks.contains(callback)) {
      _onPauseCallbacks.add(callback);
    }
  }

  void removeOnResumeCallback(VoidCallback callback) {
    _onResumeCallbacks.remove(callback);
  }

  void removeOnPauseCallback(VoidCallback callback) {
    _onPauseCallbacks.remove(callback);
  }

  void initialize() {
    if (_isInitialized) return;

    WidgetsBinding.instance.addObserver(this);
    _isInitialized = true;
    // ‚úÖ GI·∫¢M: B·ªè log n√†y (kh√¥ng c·∫ßn thi·∫øt)
    // Logger.info('‚úÖ AppLifecycleObserver initialized');
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    // ‚úÖ GI·∫¢M: CH·ªà log n·∫øu l√† Dev mode
    if (EnvironmentConfig.isDev) {
      Logger.debug('üîÑ Lifecycle: ${state.name}');
    }

    void executeCallbacks(List<VoidCallback> callbacks, String type) {
      for (final callback in callbacks) {
        try {
          callback();
        } catch (e, stackTrace) {
          // ‚úÖ GI·ªÆ: Log error (quan tr·ªçng)
          Logger.error(
            '‚ùå Error in $type callback',
            error: e,
            stackTrace: stackTrace,
          );
        }
      }
    }

    switch (state) {
      // case AppLifecycleState.resumed:
      //   Logger.info('üì± App resumed (foreground)');
      //   _executeCallbacks(_onResumeCallbacks, 'resume');
      //   break;

      // case AppLifecycleState.paused:
      //   Logger.info('‚è∏Ô∏è App paused (background)');
      //   _executeCallbacks(_onPauseCallbacks, 'pause');
      //   break;

      // case AppLifecycleState.detached:
      //   Logger.info('‚ùå App detached (closed)');
      //   break;

      // case AppLifecycleState.inactive:
      //   Logger.info('‚ö™ App inactive (temporary)');
      //   break;

      // case AppLifecycleState.hidden:
      //   Logger.info('üëª App hidden');
      //   break;
      
      case AppLifecycleState.resumed:
        // ‚úÖ GI·∫¢M: B·ªè log n√†y (qu√° nhi·ªÅu)
        // Logger.info('üì± App resumed (foreground)');
        executeCallbacks(_onResumeCallbacks, 'resume');
        break;

      case AppLifecycleState.paused:
        // ‚úÖ GI·∫¢M: B·ªè log n√†y (qu√° nhi·ªÅu)
        // Logger.info('‚è∏Ô∏è App paused (background)');
        executeCallbacks(_onPauseCallbacks, 'pause');
        break;

      case AppLifecycleState.detached:
        // ‚úÖ GI·ªÆ: Log detached (quan tr·ªçng)
        if (EnvironmentConfig.isDev) {
          Logger.info('‚ùå App detached');
        }
        break;

      case AppLifecycleState.inactive:
      case AppLifecycleState.hidden:
        // ‚úÖ GI·∫¢M: B·ªè log n√†y (kh√¥ng quan tr·ªçng)
        break;
    }
  }

  void dispose() {
    if (!_isInitialized) return;

    _onResumeCallbacks.clear();
    _onPauseCallbacks.clear();
    WidgetsBinding.instance.removeObserver(this);
    _isInitialized = false;
    // ‚úÖ GI·∫¢M: B·ªè log n√†y (kh√¥ng c·∫ßn thi·∫øt)
    // Logger.info('AppObserver disposed');
  }
}
