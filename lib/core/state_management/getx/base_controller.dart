import 'package:flutter_base_template/core/errors/result.dart';
import 'package:get/get.dart';

class BaseController extends GetxController {
  final isLoading = false.obs;
  final errorMessage = ''.obs; // ‚úÖ Cho ph√©p UI listen l·ªói n·∫øu c·∫ßn

  void showLoading() => isLoading.value = true;
  void hideLoading() => isLoading.value = false;

  /// ‚úÖ H√†m t√°i s·ª≠ d·ª•ng cho t·∫•t c·∫£ c√°c usecase (login, register, ...)
  /// [action] l√† m·ªôt h√†m Future tr·∫£ v·ªÅ ki·ªÉu Result<T>
  /// [onSuccess] ƒë∆∞·ª£c g·ªçi n·∫øu action th√†nh c√¥ng
  /// [onError] ƒë∆∞·ª£c g·ªçi n·∫øu c√≥ l·ªói x·∫£y ra
  Future<void> executeUseCase<T>({
    required Future<Result<T>> Function() action,
    void Function(T data)? onSuccess,
    void Function(String error)? onError, // ‚úÖ Callback khi l·ªói
    bool shouldShowLoading = true, // üîÑ ƒë·ªïi t√™n tr√°nh tr√πng h√†m
  }) async {
    try {
      if (shouldShowLoading) showLoading();
      final result = await action();
      if (shouldShowLoading) hideLoading();

      result.fold(
        onSuccess: (data) {
          onSuccess?.call(data);
        },
        onFailure: (failure) {
          final msg = failure.message ?? 'ƒê√£ x·∫£y ra l·ªói';
          errorMessage.value = msg;
          onError?.call(msg); // ‚úÖ callback cho UI x·ª≠ l√Ω l·ªói
        },
      );
    } catch (e) {
      if (shouldShowLoading) hideLoading();
      const msg = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';
      errorMessage.value = msg;
      onError?.call(msg);
    }
  }
}
