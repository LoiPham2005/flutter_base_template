import 'dart:io';
import 'package:dio/dio.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_base_template/core/utils/logger.dart';
import 'package:open_filex/open_filex.dart';
/// ‚úÖ FileService: D√πng ƒë·ªÉ t·∫£i, l∆∞u v√† m·ªü m·ªçi lo·∫°i file (·∫£nh, video, PDF, ZIP, v.v.)
class FileService {
  FileService._internal();
  static final FileService _instance = FileService._internal();
  factory FileService() => _instance;

  final Dio _dio = Dio();

  /// T·∫£i file t·ª´ URL v·ªÅ m√°y
  /// [url] l√† link t·∫£i
  /// [fileName] l√† t√™n file mu·ªën l∆∞u (t√πy ch·ªçn)
  /// [folderName] l√† t√™n th∆∞ m·ª•c l∆∞u trong Downloads
  Future<File?> downloadFile(String url, {String? fileName, String? folderName}) async {
    try {
      Logger.info('‚¨áÔ∏è B·∫Øt ƒë·∫ßu t·∫£i file: $url');

      // Th∆∞ m·ª•c l∆∞u tr·ªØ (Downloads ho·∫∑c Documents)
      final dir = await getDownloadsDirectory() ?? await getApplicationDocumentsDirectory();
      final folder = Directory('${dir.path}/${folderName ?? "MyAppFiles"}');
      if (!await folder.exists()) await folder.create(recursive: true);

      final filePath = '${folder.path}/${fileName ?? url.split('/').last}';

      // T·∫£i file
      await _dio.download(url, filePath);
      Logger.success('‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ: $filePath');

      return File(filePath);
    } catch (e, s) {
      Logger.error('‚ùå L·ªói khi t·∫£i file: $e', stackTrace: s);
      return null;
    }
  }

  /// M·ªü file sau khi t·∫£i
  /// H·ªó tr·ª£ t·∫•t c·∫£ ƒë·ªãnh d·∫°ng m√† h·ªá ƒëi·ªÅu h√†nh nh·∫≠n di·ªán ƒë∆∞·ª£c
  Future<void> openFile(File file) async {
    try {
      if (!await file.exists()) {
        Logger.warning('‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: ${file.path}');
        return;
      }
      Logger.info('üìÇ ƒêang m·ªü file: ${file.path}');
      await OpenFilex.open(file.path);
    } catch (e, s) {
      Logger.error('‚ùå Kh√¥ng th·ªÉ m·ªü file: $e', stackTrace: s);
    }
  }

  /// T·∫£i file v√† m·ªü lu√¥n
  Future<void> downloadAndOpen(String url, {String? fileName, String? folderName}) async {
    final file = await downloadFile(url, fileName: fileName, folderName: folderName);
    if (file != null) await openFile(file);
  }

  /// Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
  Future<bool> fileExists(String path) async {
    try {
      return File(path).exists();
    } catch (_) {
      return false;
    }
  }
}
